<?php

/**
 * @file
 * Enables search integration with Ting.
 */

/**
 * Implements hook_ctools_plugin_directory().
 *
 * It simply tells panels where to find the .inc files that define various
 * args, contexts, content_types.
 */
function ting_extrasearch_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implement hook_ctools_plugin_api().
 */
function ting_extrasearch_ctools_plugin_api($module, $api) {
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1);
  }
}
/**
 * Implements hook_menu_alter().
 *
 * Temporary hack to alter titles.
 */
function ting_extrasearch_menu_alter(&$items) {
  $items['search/tingextra']['title'] = 'Extra Data well';
  $items['search/tingextra/%menu_tail']['title'] = 'Extra Data well';
}

/**
 * Implements hook_search_info().
 */
function ting_extrasearch_search_info() {
  return array(
    'title' => t('Extra Ting'),
    'path' => 'tingextra',
    'conditions_callback' => 'ting_extrasearch_conditions_callback',
  );
}

/**
 * Implements hook_ding_facetbrowser().
 */
function ting_extrasearch_ding_facetbrowser() {
  $results             = new stdClass();
  $results->show_empty = FALSE;
  $search_result       = drupal_static('ting_extrasearch_results');
  if ($search_result) {
    $results->facets     = ($search_result instanceof TingClientSearchResult) ? $search_result->facets : array();
    $results->searchkey  = $search_result->search_key;
    return $results;
  }
}

/**
 * Implements hook_theme().
 */
function ting_extrasearch_theme() {
  return array(
    'ting_extrasearch_results' => array(
      'variables' => array('results' => NULL, 'module' => NULL),
      'file'      => 'ting_extrasearch.pages.inc',
      'template'  => 'ting-extrasearch-results',
    ),
    'ting_extrasearch_mini_pager' => array(
      'variables' => array('tags' => array(), 'element' => 0, 'parameters' => array(), 'quantity' => 9),
    ),
    'ting_extrasearch_pager' => array(
      'variables' => array('tags' => array(), 'element' => 0, 'parameters' => array(), 'quantity' => 9),
    ),
    'ting_extrasearch_display_extended_query' => array(
      'variables' => array('query_label'=>NULL,'query_string' => NULL),
      'template' => 'ting-extrasearch-display-extended-query',
    ),
    'ting_extrasearch_extended_search' => array(
      'template' => 'ting-extrasearch-extended-search',
    ),
  );
}

function ting_extrasearch_get_extended_actions() {
  return theme('ting_extrasearch_extended_search');
}

/**
 * @brief Implementation of hook_form_FORM_ID_alter() for form search_block_form.
 */
function ting_extrasearch_form_search_block_form_alter(&$form, &$form_state, $form_id) {
  $advanced_fields = array(
    'dc.creator' => array(
      'key' => 'creator',
      'title' => t('Author'),
      'description' => t('Enter the author name'),
    ),
    'dc.title' => array(
      'key' => 'title',
      'title' => t('Title'),
      'description' => t('Enter title'),
    ),
    'dc.subject' => array(
      'key' => 'subject',
      'title' => t('Subject'),
      'description' => t('Enter subject keywords'),
    ),
  );
  // We're going to disable advanced search in
  // the first version, and implement later on.
  // When implementing againg, set
  // $advanced = TRUE - just below
  // and re-enable asserts in testTingExtended() in ting_search.test.
  $advanced = FALSE;

  // Parse extended search query parameters.
  if (arg(0) == 'search') {
    $parts = explode('/', $_GET['q']);
    // Lose 'search' and the search type.
    array_shift($parts);
    $type = array_shift($parts);
    $search_query = implode('/', $parts);
    $indexes = ting_search_extract_keys($search_query, array_keys($advanced_fields));
    $search_query = $indexes['q'];
    unset($indexes['q']);
    if ($type != 'ting' and !empty($indexes)) {
      $search_query .= " " . implode(' ', $indexes);
      $indexes = array();
      $advanced = FALSE;
    }

    $form['search_block_form']['#default_value'] = $search_query;
  }

  $form['sort'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($_GET['sort']) ? check_plain($_GET['sort']) : FALSE,
    '#attributes' => array('id' => 'controls_search_sort'),
  );
  $form['size'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($_GET['size']) ? (int)$_GET['size'] : FALSE,
    '#attributes' => array('id' => 'controls_search_size'),
  );

  // See line 127-130 - disable in the first version
  //$form['form_id']['#suffix'] = ting_search_get_extended_actions();

  if ($advanced) {
    $form['advanced'] = array(
      '#type' => 'fieldset',
      '#title' => t('Advanced search'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => 101,
      '#prefix' => '<div id="advanced-search-wrapper">',
      '#suffix' => '</div>',
      '#attached' => array(
        'js' => array(
          drupal_get_path('module', 'ting_extrasearch') . '/ting_extrasearch_extendform.js',
        ),
      ),
    );

    $expand = FALSE;
    foreach ($advanced_fields as $name => $field) {
      $form['advanced'][$field['key']] = array(
        '#type' => 'textfield',
        '#title' => $field['title'],
        '#size' => 30,
        '#maxlength' => 64,
        '#description' => $field['description'],
        '#default_value' => isset($indexes[$name]) ? $indexes[$name] : '',
      );
    }
  }
  $form['#submit'] = array('ting_extrasearch_submit');

  return $form;
}

/**
 * Extract special field keys from search string.
 *
 * @param string $search_query The search query.
 * @param array $keys Keys to extract.
 *
 * @return array Where the array keys are the search keys, and the remainder
 *   search string in 'q'.
 */
function ting_extrasearch_extract_keys($search_query, $keys) {
  $indexes = &drupal_static('ting_extrasearch_extract_indexes', array());

  ting_extrasearch_extract_indexes(NULL, $keys);
  $regexpes = array(
    '/(^|\s+and\s+)\(([^)]+)\)$/i',
  );
  foreach ($regexpes as $regexp) {
    $search_query = preg_replace_callback($regexp, 'ting_extrasearch_extract_indexes', $search_query);
  }

  $indexes['q'] = $search_query;
  return $indexes;
}

/**
 * preg_replace_callback function.
 */
function ting_extrasearch_extract_indexes($matches, $set_keys = NULL) {
  static $keys;
  if ($set_keys) {
    $keys = array_flip($set_keys);
  }
  $return = array();
  $subexps = preg_split('/\s+and\s+/i', $matches[2], NULL, PREG_SPLIT_NO_EMPTY);
  $indexes = &drupal_static(__FUNCTION__, array());
  foreach ($subexps as $subexp) {
    if ((preg_match('/^([^=]+)\=([^"]*)$/', $subexp, $rx) || preg_match('/^([^=]+)\="(.*)"$/', $subexp, $rx)) && array_key_exists(trim($rx[1]), $keys)) {
      $indexes[trim($rx[1])] = trim($rx[2]);
    }
    else {
      $return[] = $subexp;
    }
  }
  // Reappend unknown stuff.
  if (sizeof($return)) {
    return " and (" . implode(' and ', $return) . ")";
  }
  return "";
}

/**
 * Search conditions callback.
 */
function ting_extrasearch_conditions_callback($keys) {
  $conditions = array();

  if (!empty($_REQUEST['keys'])) {
    $conditions['keys'] = check_plain($_REQUEST['keys']);
  }

  if (!empty($_REQUEST['size'])) {
    $conditions['size'] = (int)$_REQUEST['size'];
  }


  if (!empty($_REQUEST['sort'])) {
    $conditions['sort'] = check_plain($_REQUEST['sort']);
  }

  // If facets is set, check if we have to remove any, if so,
  // reload the page.
  if (!empty($_REQUEST['facets'])) {
    $remove = array();
    $redirect = FALSE;
    foreach ($_REQUEST['facets'] as $key => $facet) {
      if (preg_match('/^-facet/', $facet)) {
        $remove[] = preg_replace('/^-/', '', $facet);
        $redirect = TRUE;
        unset($_REQUEST['facets'][$key]);
      }
    }

    foreach ($_REQUEST['facets'] as $key => $facet) {
      foreach ($remove as $rem) {
        if ($facet == $rem) {
          unset($_REQUEST['facets'][$key]);
          continue;
        }
      }
    }
    $conditions['facets'] = $_REQUEST['facets'];
    if ($redirect === TRUE) {
      $facets = array();
      foreach ($conditions['facets'] as $facet) {
        $facets['facets'][] =  $facet;
      }
      drupal_goto(rawurldecode($_GET['q']), array('query' => $facets));
    }
  }
  return $conditions;
}

/**
 * Implements hook_search_execute().
 */
function ting_extrasearch_search_execute($keys = NULL, $conditions = NULL) {
  // TODO: Set sort options
  $options    = array();
  $results    = array();
  $facetArray = array();
  $query      = '(' . _ting_extrasearch_quote($keys) . ')';
  $options['numFacets'] = 25;
  module_load_include('client.inc', 'ting');
   //Extend query with selected facets
  if (isset($conditions['facets']) && $conditions['facets'] != NULL) {
    $facets = $conditions['facets'];
    foreach ($facets as $facet) {
      $facet = explode(':', $facet, 2);
      if ($facet[0]) {
        $facetArray[] = $facet[0] . '="' . rawurldecode($facet[1]) . '"';
      }
    }

    $query .= ' AND ' . implode(' AND ', $facetArray);
  }
  try {
    $page = pager_find_page();

    $resultsPerPage = variable_get('ting_extrasearch_results_per_page', 10);
    if (!empty($conditions['size'])) {
      $resultsPerPage = $conditions['size'];
    }

    if (!empty($conditions['sort'])) {
      $options['sort'] = $conditions['sort'];
    }


    // Here, we do custom ting extra search
    $searchResult = ting_do_extrasearch($query, $page + 1, $resultsPerPage, $options);


    if (isset($searchResult->collections)) {
      $searchResult->search_key = $keys;

      // TODO: caching highes total_result know value of specific search
      //       at the moment we only know if there is one more page
      $total_results = ($page + 1) * $resultsPerPage + ($searchResult->more ? 1 : 0);

      pager_default_initialize($total_results, $resultsPerPage);

      foreach ($searchResult->collections as &$collection) {
        $build = ting_collection_view($collection, 'teaser');
        $uri = entity_uri('ting_collection', $collection);
        $results[] = array(
          'link' => url($uri['path'], $uri['options']),
          'type' => '',
          'title' => $collection->title,
          'user' => '',
          'date' => '',
          'snippet' => drupal_render($build),
        );
      }
    }
  }
  catch (TingClientException $e) {
    // TODO: Log the error.
    $results = array();
  }

  drupal_static('ting_extrasearch_results', $searchResult);

  return $results;
}

/**
 * Implements hook_search_page().
 */
function ting_extrasearch_search_page($results) {
  return array(
    '#theme' => 'ting_extrasearch_results',
    '#results' => $results,
    '#module' => 'ting_extrasearch',
  );
}

/**
 * Theme a pager
 */
function theme_ting_extrasearch_pager($variables) {
  $tags = $variables['tags'];
  $element = $variables['element'];
  $parameters = $variables['parameters'];
  $quantity = $variables['quantity'];
  $hide_list = isset($variables['hide_list']) ? $variables['hide_list'] : FALSE;
  global $pager_page_array, $pager_total;

  // Calculate various markers within this pager piece:
  // Middle is used to "center" pages around the current page.
  $pager_middle = ceil($quantity / 2);
  // current is the page we are currently paged to
  $pager_current = $pager_page_array[$element] + 1;
  // first is the first page listed by this pager piece (re quantity)
  $pager_first = $pager_current - $pager_middle + 1;
  // last is the last page listed by this pager piece (re quantity)
  $pager_last = $pager_current + $quantity - $pager_middle;
  // max is the maximum page number
  $pager_max = $pager_total[$element];
  // End of marker calculations.

  // Prepare for generation loop.
  $i = $pager_first;
  if ($pager_last > $pager_max) {
    // Adjust "center" if at end of query.
    $i = $i + ($pager_max - $pager_last);
    $pager_last = $pager_max;
  }
  if ($i <= 0) {
    // Adjust "center" if at start of query.
    $pager_last = $pager_last + (1 - $i);
    $i = 1;
  }
  // End of generation loop preparation.

  $li_previous = theme('pager_previous', array('text' => (isset($tags[1]) ? $tags[1] : t('‹ previous')), 'element' => $element, 'interval' => 1, 'parameters' => $parameters));

  if (empty($li_previous)) {
    $li_previous = "&nbsp;";
  }

  $li_first = theme('pager_first', array('text' => (isset($tags[0]) ? $tags[0] : t('« first')), 'element' => $element, 'parameters' => $parameters));

  if (empty($li_first)) {
    $li_first = "&nbsp;";
  }

  $li_next = theme('pager_next', array('text' => (isset($tags[3]) ? $tags[3] : t('next ›')), 'element' => $element, 'interval' => 1, 'parameters' => $parameters));
  if (empty($li_next)) {
    $li_next = "&nbsp;";
  }

  $li_last = theme('pager_last', array('text' => (isset($tags[4]) ? $tags[4] : t('last »')), 'element' => $element, 'parameters' => $parameters));

  if (empty($li_last)) {
    $li_last = "&nbsp;";
  }

  if ($pager_total[$element] > 1) {
    if ($pager_current > 2) {
      $items[] = array(
        'class' => array('pager-first'),
        'data' => $li_first,
      );
    }

    $items[] = array(
      'class' => array('pager-previous'),
      'data' => $li_previous,
    );

    // When there is more than one page, create the pager list.
    if (!$hide_list && $i != $pager_max) {
      if ($i > 1) {
        $items[] = array(
          'class' => array('pager-ellipsis'),
          'data' => '…',
        );
      }
      // Now generate the actual pager piece.
      for (; $i <= $pager_last && $i <= $pager_max; $i++) {
        if ($i < $pager_current) {
          $items[] = array(
            'class' => array('pager-item'),
            'data' => theme('pager_previous', array('text' => $i, 'element' => $element, 'interval' => ($pager_current - $i), 'parameters' => $parameters)),
          );
        }
        if ($i == $pager_current) {
          $items[] = array(
            'class' => array('pager-current'),
            'data' => $i,
          );
        }
        if ($i > $pager_current) {
          $items[] = array(
            'class' => array('pager-item'),
            'data' => theme('pager_next', array('text' => $i, 'element' => $element, 'interval' => ($i - $pager_current), 'parameters' => $parameters)),
          );
        }
      }
      if ($i < $pager_max) {
        $items[] = array(
          'class' => array('pager-ellipsis'),
          'data' => '…',
        );
      }
    }
    else {
      $items[] = array(
        'class' => array('pager-current'),
        'data' => $pager_current,
      );
    }

    $items[] = array(
      'class' => array('pager-next'),
      'data' => $li_next,
    );
    if ($pager_current + 1 < $pager_max && $li_last) {
      $items[] = array(
        'class' => array('pager-last'),
        'data' => $li_last,
      );
    }
    return theme('item_list', array('items' => $items, 'type' => 'ul', 'attributes' => array('class' => array('pager'))));
  }
}

/**
 * Theme a mini pager with only first, previous and next links.
 */
function theme_ting_extrasearch_mini_pager($variables) {
  $tags = $variables['tags'];
  $element = $variables['element'];
  $parameters = $variables['parameters'];
  $quantity = $variables['quantity'];
  global $pager_page_array, $pager_total;

  // Calculate various markers within this pager piece:
  // Middle is used to "center" pages around the current page.
  $pager_middle = ceil($quantity / 2);
  // current is the page we are currently paged to
  $pager_current = $pager_page_array[$element] + 1;
  // max is the maximum page number
  $pager_max = $pager_total[$element];
  // End of marker calculations.


  $li_previous = theme('pager_previous', array('text' => (isset($tags[1]) ? $tags[1] : t('‹ previous')), 'element' => $element, 'interval' => 1, 'parameters' => $parameters));

  if (empty($li_previous)) {
    $li_previous = "&nbsp;";
  }

  $li_first = theme('pager_first', array('text' => (isset($tags[0]) ? $tags[0] : t('« first')), 'element' => $element, 'parameters' => $parameters));

  if (empty($li_first)) {
    $li_first = "&nbsp;";
  }

  $li_next = theme('pager_next', array('text' => (isset($tags[3]) ? $tags[3] : t('next ›')), 'element' => $element, 'interval' => 1, 'parameters' => $parameters));
  if (empty($li_next)) {
    $li_next = "&nbsp;";
  }

  if ($pager_total[$element] > 1) {
    $items[] = array(
      'class' => array('pager-first'),
      'data' => $li_first,
    );

    $items[] = array(
      'class' => array('pager-previous'),
      'data' => $li_previous,
    );

    $items[] = array(
      'class' => array('pager-next'),
      'data' => $li_next,
    );
    return theme('item_list', array('items' => $items, 'type' => 'ul', 'attributes' => array('class' => array('pager'))));
  }
}


/**
 * Implements hook_block_info().
 */
function ting_extrasearch_block_info() {
  return array(
    'sort-form' => array(
      'info' => t('Ting extrasearch "sort by" form'),
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
    'search-display-extended-query' => array(
      'info' => t('Ting extrasearch extended query display'),
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function ting_extrasearch_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'sort-form':
      drupal_add_js(drupal_get_path('module', 'ting_extrasearch') . '/js/ting_extrasearch_extendform.js');
      $block['subject'] = t('Ting search sort controls');

      // Only display form if there are any search results.
      $search_result = drupal_static('ting_extrasearch_results');
      if (isset($search_result->numTotalObjects) && $search_result->numTotalObjects > 0) {
        $block['content'] = drupal_get_form('ting_extrasearch_sort_form');
      }
      break;

    case 'search-display-extended-query':
      drupal_add_js(drupal_get_path('module', 'ting_extrasearch') . '/js/ting_extrasearch_extendform.js');
      $block['content'] = theme('ting_extrasearch_display_extended_query', array('query_label' => t('Your query:'), 'query_string' => NULL));
      break;
  }
  return $block;

}

function extrasearch_extend_content() {
  return drupal_get_form('extrasearch_extend_form');
}


/**
* Create form for sorting search result.
*/
function ting_extrasearch_sort_form($form_state) {
  $form = array();

  $form['sort'] = array(
    '#type' => 'select',
    '#default_value' => isset($_GET['sort']) ? check_plain($_GET['sort']) : variable_get('ting_extrasearch_default_sort', ''),
    '#options' => ting_extrasearch_sort_options(),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Sort'),
    '#states' => array(
      'visible' => array(':input[name="op"]' => array('value' => '')),
    ),
  );
  return $form;
}

/**
* Set default sort options.
*
* @return array
* Returns an array of sort options.
*/
function ting_extrasearch_sort_options() {
  $options = array(
    '' => t('Ranking'),
    'title_ascending' => t('Title (Ascending)'),
    'title_descending' => t('Title (Descending)'),
    'creator_ascending' => t('Creator (Ascending)'),
    'creator_descending' => t('Creator (Descending)'),
    'date_ascending' => t('Date (Ascending)'),
    'date_descending' => t('Date (Descending)'),
  );

  // Add label to the front of the options.
  foreach ($options as $key => $option) {
    $options[$key] = t('Sort by: !sort', array('!sort' => $option));
  }

  return $options;
}


/**
 * Process submitted data for sorting order form
 */
function ting_extrasearch_sort_form_submit($form, &$form_state) {
  $query = drupal_get_query_parameters();

  if (isset($form_state['input']['sort'])) {
    $query = array('sort' => $form_state['input']['sort']) + $query;
  }

  $form_state['redirect'] = array($_GET['q'], array('query' => $query, ), );

}

/**
* Create links for changing how many records per page.
*
* This function uses the static variable "ting_extrasearch_results", so if a search
* result have not been render yet it will be empty. So you have to ensure that
* the search have been executed.
*
* In panels "render last" option can help in the plugin array.
*/
function extrarecords_per_page_controls_content() {
  // Get search results.
  $search_result = drupal_static('ting_extrasearch_results');

  // Use static as panels may call this more than once.
  $output = &drupal_static(__FUNCTION__, array());

  // Don't show anything if the search result is empty.
  if (!empty($search_result->collections) && empty($output)) {
    // Get the default results per page.
    $def_size = variable_get('ting_extrasearch_results_per_page', 10);

    // Set default as the first value.
    $sizes = array($def_size => $def_size);

    // Increment the default size by 2.5 and 5 to provide the user with three
    // different options. Defaults to 10, 25, 50 posts per search page.
    $size = (int) round($def_size * 2.5);
    $sizes[$size] = $size;
    $size = (int) round($def_size * 5);
    $sizes[$size] = $size;

    // Iterate through sizes and build the options.
    foreach ($sizes as $number => $text) {
      // Set the current pager page to first page (used in query).
      $pager_page = array('page' => 0);

      // Find the currently select size.
      $keys = array_keys($sizes);
      $selected = FALSE;
      if (isset($_GET['size']) && $_GET['size'] == $number) {
        $selected = TRUE;
      }
      elseif (!isset($_GET['size']) && $number == $keys[0]) {
        $selected = TRUE;
      }

      // Add the result to the output.
      $output[$text] = array(
        'size' => $number,
        'text' => $text,
        'query' => array('size' => $number) + $pager_page + drupal_get_query_parameters(),
        'selected' => $selected,
      );
    }

    return $output;
  }
}

/**
 * Process a block search form submission.
 */
function ting_extrasearch_submit($form, &$form_state) {
  $controls = array();
  // The search form relies on control of the redirect destination for its
  // functionality, so we override any static destination set in the request,
  // for example by drupal_access_denied() or drupal_not_found()
  // (see http://drupal.org/node/292565).
  if (isset($_GET['destination'])) {
    unset($_GET['destination']);
  }

  $form_id = $form['form_id']['#value']; // 'search_block_form'
  $keys = $form_state['values'][$form_id];
  $fields = array();

  $extended_fields = array(
    'creator' => 'dc.creator',
    'title' => 'dc.title',
    'subject' => 'dc.subject',
  );

  foreach ($extended_fields as $name => $index) {
    if (!empty($form_state['values'][$name])) {
      $value = $form_state['values'][$name];
      $fields[] = $index . '=' . (strpos($value, ' ') ? '"' . $value . '"' : $value);
    }
  }

  $q = array();
  if (!empty($keys)) {
    $q[] = $keys;
  }
  if (!empty($fields)) {
    $q[] = '(' . implode(' AND ', $fields) . ')';
  }
  $q = join(' AND ', $q);

  $s = $form_state['values']['sort'];
  if ( $s != "" ) {
    $controls['sort'] = $s;
  }

  $s = $form_state['values']['size'];
  if ( $s != "" ) {
    $controls['size'] = $s;
  }


  // Check to see if the form was submitted empty.
  // If it is empty, display an error message.
  // (This method is used instead of setting #required to TRUE for this field
  // because that results in a confusing error message.  It would say a plain
  // "field is required" because the search keywords field has no title.
  // The error message would also complain about a missing #title field.)
  if ($q == '') {
    form_set_error('keys', t('Please enter some keywords.'));
  }
  $search_info = array();
  $request_path = arg();

  if ($request_path[0] != 'search' || !isset($request_path[1])) {
    $search_info = search_get_default_module_info();
  }
  else {
    foreach (search_get_info() as $search_engine) {
      if ($search_engine['path'] == $request_path[1]) {
        $search_info = $search_engine;
        break;
      }
    }
  }
  if (!empty($search_info['path']) && in_array($search_info['module'], variable_get('search_active_modules', array()))) {
    $form_state['redirect'] = FALSE;
    $url = 'search/' . $search_info['path']. '/' . trim($q);
    drupal_goto($url, array('query' => $controls));
  }
  else {
    form_set_error(NULL, t('Search is currently disabled.'), 'error');
  }
}

/**
 * Attempt to quote reserved words in a search query.
 *
 * As proper quoting would require a full CQL parser, we cheat and
 * just work on the part we know is the free text part.
 *
 * Also, we don't mess with uppercase reserved words.
 */
function _ting_extrasearch_quote($string) {
  if (preg_match('/^(.*?)(AND \(.*|$)/', $string, $rx)) {
    $keys = $rx[1];
    $new_keys = preg_replace_callback('/(?:(".*?(?<!\\\)")|\b(and|or|not|prox)\b)/i', '_ting_extrasearch_quote_callback', $keys);
    $string = preg_replace('/^' . preg_quote($keys, '/') . '/', $new_keys, $string);
  }
  return $string;
}

/**
 *
 */
function _ting_extrasearch_quote_callback($matches) {
  // If $matches[2] is empty, it's because the quote pattern
  // matched. Don't do anything with it.
  if (!empty($matches[2])) {
    // Boolean operator, but not uppercase, quote it.
    if ($matches[2] != drupal_strtoupper($matches[2])) {
      return '"' . $matches[2] . '"';
    }
    // Uppercase boolean operator, return as is.
    return $matches[2];
  }
  // We have a quote. Just return it.
  return $matches[1];
}


/**
 * Performs a EXTRA search agains the well
 * function modified from ting client library (ting.client.inc)
 *
 * @param string $query
 *    The search query
 * @param int $page
 *    The page number to retrieve search results for
 * @param int $results_per_page
 *    The number of results to include per page
 * @param array $options
 *    Options to pass to the search. Possible options are:
 *    - facets: Array of facet names for which to return results. Default: facet.subject, facet.creator, facet.type, facet.date, facet.language
 *    - numFacets: The number of terms to include with each facet. Default: 10
 *    - enrich: Whether to include additional information and cover images with each object. Default: false
 *    - sort: The key to sort the results by. Default: "" (corresponds to relevance). The possible values are defined by the sortType type in the XSD.
 *    - rank: The ranking type, as defined in the XSD.
 *    - supportingTypes: Whether to include supporting types such as reviews. Default: false
 *    - reply_only: Don't change the result objects to TingCollection objects.
 * @return TingClientSearchResult
 *    The search result
 */
function ting_do_extrasearch($query, $page = 1, $results_per_page = 10, $options = array()) {



  //must copy+modify ting_get_request_factory() ?
  //my guess is no..
  $request = ting_get_request_factory()->getSearchRequest();


  $request->setQuery($query);
  if ($agency = variable_get('ting_agency', FALSE)) {
    $request->setAgency($agency);
  }
  $request->setStart($results_per_page * ($page - 1) + 1);
  $request->setNumResults($results_per_page);

  if (!isset($options['facets']) and module_exists('ding_facetbrowser')) {
    $options['facets'] = array();
    // Populate facets with configured facets.
    foreach (variable_get('ding_facetbrowser_facets', array()) as $facet) {
      $options['facets'][] = $facet['name'];
    }
  }

  $request->setFacets((isset($options['facets'])) ? $options['facets'] : array('facet.subject', 'facet.creator', 'facet.type', 'facet.category', 'facet.language', 'facet.date', 'facet.acSource'));
  $request->setNumFacets((isset($options['numFacets'])) ? $options['numFacets'] : ((sizeof($request->getFacets()) == 0) ? 0 : 10));
  if (isset($options['sort']) && $options['sort']) {
    $request->setSort($options['sort']);
  }
  $request->setAllObjects(isset($options['allObjects']) ? $options['allObjects'] : FALSE);

  // Set search profile, if applicable.
  //$profile = 'kulturarv';
  $profile = variable_get('ting_extrasearch_profile', '');

  if (!empty($profile) && method_exists($request, 'setProfile')) {
    $request->setProfile($profile);
  }

  // Apply custom ranking if enabled.
  if (variable_get('ting_ranking_custom', FALSE)) {
    $fields = array();
    foreach (variable_get('ting_ranking_fields', array()) as $field) {
      $fields[] = array(
        'fieldName' => $field['field_name'],
        'fieldType' => $field['field_type'],
        'weight' => $field['weight'],
      );
    }

    if (!empty($fields)) {
      // Add the default anyIndex boosts.
      $fields[] = array(
        'fieldName' => 'cql.anyIndexes',
        'fieldType' => 'phrase',
        'weight' => 1,
      );

      $fields[] = array(
        'fieldName' => 'cql.anyIndexes',
        'fieldType' => 'word',
        'weight' => 1,
      );

      $request->userDefinedRanking = array('tieValue' => 0.1, 'rankField' => $fields);
    }
  }
  // Otherwise, use the ranking setting.
  else {
    $request->setRank((isset($options['rank']) && $options['rank']) ? $options['rank'] : 'rank_general');
  }

  // Apply custom boosts if any.
  $boosts = variable_get('ting_boost_fields', array());

  if ($boosts) {
    $uboosts = array();
    foreach ($boosts as $boost_field) {
      $uboosts[] = array(
        'fieldName' => $boost_field['field_name'],
        'fieldValue' => $boost_field['field_value'],
        'weight' => $boost_field['weight'],
      );
    }
    $request->userDefinedBoost = array('boostField' => $uboosts);
  }



  //must copy+modify ting_execute_cache() ?
  //my guess is no..
  $search_result = ting_execute_cache($request);

  // Replace collections with proper TingCollection objects.
  if ($search_result && is_array($search_result->collections)) {
    $ids = array();
    foreach ($search_result->collections as &$collection) {
      if (isset($collection->objects[0])) {
        $ids[] = $collection->objects[0]->id;
      }
    }
    if (!isset($options['reply_only']) || !$options['reply_only']) {
      $search_result->collections = entity_load('ting_collection', array(), array('ding_entity_id' => $ids));
    }
  }

  return $search_result;
}

/**
 * Adding extra buttons to settings at admin/config/ting/covers/defaults
 */
function ting_extrasearch_form_ting_covers_plus_admin_default_covers_form_alter(&$form, &$form_state, $form_id) {
  $form['update']['extrasearch_types'] = array(
    '#type' => 'submit',
    '#value' => t('+ update with types from Extrasearch profile'),
    '#submit' => array('ting_extrasearch_update_types'),
  );

  $form['update']['extrasearch_sources'] = array(
    '#type' => 'submit',
    '#value' => t('+ update with sources from Extrasearch profile'),
    '#submit' => array('ting_extrasearch_update_sources'),
  );

}

function ting_extrasearch_submit_function($delta = '', $edit = array()){
  variable_set('ting_extrasearch_profile', $edit['values']['ting_extrasearch_profile']);
}

/**
 * Submit handler. Updates the list of known well types with additional types from extrasearch profile.
 */
function ting_extrasearch_update_types($form, &$form_state) {
  _tingextra_fetch_well_types();
}

/**
 * Submit handler. Updates the list of known well sources with additional sources from extrasearch profile.
 */
function ting_extrasearch_update_sources($form, &$form_state) {
  _tingextra_fetch_well_sources();
}

/**
* Fetch known types from the datawell (from profile defined in ting_extrasearch).
*/
function _tingextra_fetch_well_types() {
  // Get a list of types by executing a null query and look at the facets
  // result.
  $options = array(
    'facets' => array('facet.type'),
    'numFacets' => 99,
    'reply_only' => TRUE,
    'sort' => 'random',
  );
  module_load_include('client.inc', 'ting');

  // * (star search) fails - use "n" and hope to get all facets still
  $result = ting_do_extrasearch("n", 0, 0, $options);

  $types = array();
  foreach ($result->facets['facet.type']->terms as $term => $count) {
    $types[drupal_strtolower($term)] = $count;
  }

  // Merge any retrieved types with the exising list of well types
  if (!empty($types)) {
    $existing_types = variable_get('ting_well_types', array());

    // Merge. Values from $existing_types is kept, only extra keys in $types will be added.
    $types = $existing_types + $types;

    variable_set('ting_well_types', $types);
  }
}

/**
* Fetch known sources from the datawell (from profile defined in ting_extrasearch).
*/
function _tingextra_fetch_well_sources() {
  // Get a list of sources by executing a null query and look at the facets
  // result.
  $options = array(
    'facets' => array('facet.acSource'),
    'numFacets' => 99,
    'reply_only' => TRUE,
    'sort' => 'random',
  );
  module_load_include('client.inc', 'ting');

  // * (star search) fails - use "n" and hope to get all facets still
  $result = ting_do_extrasearch("n", 0, 0, $options);

  $sources = array();
  foreach ($result->facets['facet.acSource']->terms as $term => $count) {
    $sources[drupal_strtolower($term)] = $count;
  }

  // Merge any retrieved sources with the exising list of well sources
  if (!empty($sources)) {
    $existing_sources = variable_get('ting_well_sources', array());

    // Merge. Values from $existing_sources is kept, only extra keys in $sources will be added.
    $sources = $existing_sources + $sources;

    variable_set('ting_well_sources', $sources);
  }

}